
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSErightASSIGNADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNleftLTGTLEGENEEQleftPLUSMINUSDOTADDDOTSUBleftTIMESDIVIDEDOTMULDOTDIVrightUMINUSrightTRANSPOSEADDASSIGN ASSIGN BREAK COLON COMMA CONTINUE DIVASSIGN DIVIDE DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE GT ID IF INTNUM LBRACE LBRACKET LE LPAREN LT MINUS MULASSIGN NE ONES PLUS PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING SUBASSIGN TIMES TRANSPOSE WHILE ZEROS\n        program : statements\n        \n        statements : statement\n        \n        statements : statements statement\n        \n        statement : if_statement\n                   | while_loop\n                   | for_loop\n                   | return_statement\n                   | print_statement\n                   | assignment\n        \n        statement : break_statement\n        \n        statement : continue_statement\n        \n        statement : LBRACE statements RBRACE\n        \n        assignment : lvalue ASSIGN expression SEMICOLON\n                    | lvalue ADDASSIGN expression SEMICOLON\n                    | lvalue SUBASSIGN expression SEMICOLON\n                    | lvalue MULASSIGN expression SEMICOLON\n                    | lvalue DIVASSIGN expression SEMICOLON\n        \n        matrix_element : ID LBRACKET vector_elements RBRACKET\n        \n        lvalue : matrix_element\n        \n        lvalue : ID\n        \n        expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DOTADD expression\n                  | expression DOTSUB expression\n                  | expression DOTMUL expression\n                  | expression DOTDIV expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : FLOATNUM\n        \n        expression : INTNUM\n        \n        expression : STRING\n        \n        expression : ID\n        \n        expression : matrix_element\n        \n        expression : MINUS expression %prec UMINUS\n        \n        expression : expression TRANSPOSE\n        \n        condition : expression LT expression\n                 | expression GT expression\n                 | expression LE expression\n                 | expression GE expression\n                 | expression NE expression\n                 | expression EQ expression\n        \n        expression : matrix_function\n                    | vector\n        \n        matrix_function : EYE LPAREN vector_elements RPAREN\n        \n        matrix_function : ZEROS LPAREN vector_elements RPAREN\n        \n        matrix_function : ONES LPAREN vector_elements RPAREN\n        \n        if_statement : IF LPAREN condition RPAREN statement %prec IFX\n        \n        if_statement : IF LPAREN condition RPAREN statement ELSE statement\n        \n        while_loop : WHILE LPAREN condition RPAREN statement\n        \n        for_loop : FOR ID ASSIGN range statement\n        \n        range : expression COLON expression\n        \n        break_statement : BREAK SEMICOLON\n        \n        continue_statement : CONTINUE SEMICOLON\n        \n        return_statement : RETURN SEMICOLON\n        \n        return_statement : RETURN expression SEMICOLON\n        \n        print_statement : PRINT vector_elements SEMICOLON\n        \n        vector : LBRACKET vector_elements RBRACKET\n        \n        vector_elements : expression\n        \n        vector_elements : vector_elements COMMA expression\n        '
    
_lr_action_items = {'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[12,12,-2,-4,-5,-6,-7,-8,-9,-10,-11,12,-3,12,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,12,12,12,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,12,-52,-49,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[13,13,-2,-4,-5,-6,-7,-8,-9,-10,-11,13,-3,13,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,13,13,13,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,13,-52,-49,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-11,14,-3,14,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,14,14,14,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,14,-52,-49,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,15,-3,15,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,15,15,15,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,15,-52,-49,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-11,17,-3,17,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,17,17,17,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,17,-52,-49,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,18,-3,18,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,18,18,18,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,18,-52,-49,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,20,-3,20,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,20,20,20,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,20,-52,-49,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,23,24,29,33,34,35,36,37,38,39,51,52,53,59,68,69,75,82,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,122,123,124,125,126,127,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,21,-3,21,-55,-30,-31,-32,-33,-34,-43,-44,-53,-54,-12,-56,-36,-35,-57,21,21,21,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,-45,-46,-47,21,-52,-49,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,15,17,18,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,46,47,48,49,50,51,52,53,57,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,112,119,120,121,122,123,124,125,126,127,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,16,27,36,36,-3,16,36,36,36,-55,36,36,-30,-31,-32,-33,-34,-43,-44,36,36,36,36,36,36,-53,-54,-12,36,-56,36,36,36,36,36,36,36,36,-36,-35,36,36,36,-57,36,16,36,36,36,36,36,36,16,16,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-13,-14,-15,-16,-17,-48,-50,-51,36,-45,-46,-47,16,-52,-49,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,23,29,51,52,53,59,75,107,108,109,110,111,112,119,120,127,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-3,-55,-53,-54,-12,-56,-57,-13,-14,-15,-16,-17,-48,-50,-51,-49,]),'RBRACE':([3,4,5,6,7,8,9,10,11,23,24,29,51,52,53,59,75,107,108,109,110,111,112,119,120,127,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-3,53,-55,-53,-54,-12,-56,-57,-13,-14,-15,-16,-17,-48,-50,-51,-49,]),'ELSE':([4,5,6,7,8,9,10,11,29,51,52,53,59,75,107,108,109,110,111,112,119,120,127,],[-4,-5,-6,-7,-8,-9,-10,-11,-55,-53,-54,-12,-56,-57,-13,-14,-15,-16,-17,125,-50,-51,-49,]),'LPAREN':([13,14,17,18,25,26,28,31,32,40,41,42,43,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[25,26,32,32,32,32,32,32,32,32,72,73,74,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'ASSIGN':([16,19,22,27,92,],[-20,46,-19,57,-18,]),'ADDASSIGN':([16,19,22,92,],[-20,47,-19,-18,]),'SUBASSIGN':([16,19,22,92,],[-20,48,-19,-18,]),'MULASSIGN':([16,19,22,92,],[-20,49,-19,-18,]),'DIVASSIGN':([16,19,22,92,],[-20,50,-19,-18,]),'LBRACKET':([16,17,18,25,26,28,31,32,36,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[28,40,40,40,40,40,40,40,28,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'SEMICOLON':([17,20,21,30,33,34,35,36,37,38,39,44,45,68,69,77,78,79,80,81,92,93,94,95,96,97,98,99,100,101,102,106,122,123,124,],[29,51,52,59,-30,-31,-32,-33,-34,-43,-44,75,-59,-36,-35,107,108,109,110,111,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-60,-45,-46,-47,]),'FLOATNUM':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'INTNUM':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'STRING':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'MINUS':([17,18,25,26,28,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,55,57,60,61,62,63,64,65,66,67,68,69,70,72,73,74,76,77,78,79,80,81,83,84,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,121,122,123,124,126,],[31,31,31,31,31,61,31,31,-30,-31,-32,-33,-34,-43,-44,31,61,31,31,31,31,31,61,31,31,31,31,31,31,31,31,31,-36,-35,61,31,31,31,31,61,61,61,61,61,31,31,31,31,31,31,61,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,61,61,61,61,61,61,61,31,-45,-46,-47,61,]),'EYE':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'ZEROS':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ONES':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'PLUS':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[60,-30,-31,-32,-33,-34,-43,-44,60,60,-36,-35,60,60,60,60,60,60,60,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,60,60,60,60,60,60,60,-45,-46,-47,60,]),'TIMES':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[62,-30,-31,-32,-33,-34,-43,-44,62,62,-36,-35,62,62,62,62,62,62,62,-18,62,62,-23,-24,62,62,-27,-28,-29,-58,62,62,62,62,62,62,62,-45,-46,-47,62,]),'DIVIDE':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[63,-30,-31,-32,-33,-34,-43,-44,63,63,-36,-35,63,63,63,63,63,63,63,-18,63,63,-23,-24,63,63,-27,-28,-29,-58,63,63,63,63,63,63,63,-45,-46,-47,63,]),'DOTADD':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[64,-30,-31,-32,-33,-34,-43,-44,64,64,-36,-35,64,64,64,64,64,64,64,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,64,64,64,64,64,64,64,-45,-46,-47,64,]),'DOTSUB':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[65,-30,-31,-32,-33,-34,-43,-44,65,65,-36,-35,65,65,65,65,65,65,65,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,65,65,65,65,65,65,65,-45,-46,-47,65,]),'DOTMUL':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[66,-30,-31,-32,-33,-34,-43,-44,66,66,-36,-35,66,66,66,66,66,66,66,-18,66,66,-23,-24,66,66,-27,-28,-29,-58,66,66,66,66,66,66,66,-45,-46,-47,66,]),'DOTDIV':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[67,-30,-31,-32,-33,-34,-43,-44,67,67,-36,-35,67,67,67,67,67,67,67,-18,67,67,-23,-24,67,67,-27,-28,-29,-58,67,67,67,67,67,67,67,-45,-46,-47,67,]),'TRANSPOSE':([30,33,34,35,36,37,38,39,45,55,68,69,70,77,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,106,113,114,115,116,117,118,122,123,124,126,],[68,-30,-31,-32,-33,-34,-43,-44,68,68,-36,68,68,68,68,68,68,68,68,-18,68,68,68,68,68,68,68,68,-29,-58,68,68,68,68,68,68,68,-45,-46,-47,68,]),'COMMA':([33,34,35,36,37,38,39,44,45,58,68,69,71,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,76,-59,76,-36,-35,76,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,76,76,76,-60,-45,-46,-47,]),'LT':([33,34,35,36,37,38,39,55,68,69,92,93,94,95,96,97,98,99,100,101,102,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,83,-36,-35,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-45,-46,-47,]),'GT':([33,34,35,36,37,38,39,55,68,69,92,93,94,95,96,97,98,99,100,101,102,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,84,-36,-35,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-45,-46,-47,]),'LE':([33,34,35,36,37,38,39,55,68,69,92,93,94,95,96,97,98,99,100,101,102,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,85,-36,-35,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-45,-46,-47,]),'GE':([33,34,35,36,37,38,39,55,68,69,92,93,94,95,96,97,98,99,100,101,102,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,86,-36,-35,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-45,-46,-47,]),'NE':([33,34,35,36,37,38,39,55,68,69,92,93,94,95,96,97,98,99,100,101,102,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,87,-36,-35,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-45,-46,-47,]),'EQ':([33,34,35,36,37,38,39,55,68,69,92,93,94,95,96,97,98,99,100,101,102,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,88,-36,-35,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-45,-46,-47,]),'RBRACKET':([33,34,35,36,37,38,39,45,58,68,69,71,92,93,94,95,96,97,98,99,100,101,102,106,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,-59,92,-36,-35,102,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-60,-45,-46,-47,]),'RPAREN':([33,34,35,36,37,38,39,45,54,56,68,69,70,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,114,115,116,117,118,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,-59,82,89,-36,-35,101,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,122,123,124,-60,-37,-38,-39,-40,-41,-42,-45,-46,-47,]),'COLON':([33,34,35,36,37,38,39,68,69,91,92,93,94,95,96,97,98,99,100,101,102,122,123,124,],[-30,-31,-32,-33,-34,-43,-44,-36,-35,121,-18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-58,-45,-46,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,12,],[2,24,]),'statement':([0,2,12,24,82,89,90,125,],[3,23,3,23,112,119,120,127,]),'if_statement':([0,2,12,24,82,89,90,125,],[4,4,4,4,4,4,4,4,]),'while_loop':([0,2,12,24,82,89,90,125,],[5,5,5,5,5,5,5,5,]),'for_loop':([0,2,12,24,82,89,90,125,],[6,6,6,6,6,6,6,6,]),'return_statement':([0,2,12,24,82,89,90,125,],[7,7,7,7,7,7,7,7,]),'print_statement':([0,2,12,24,82,89,90,125,],[8,8,8,8,8,8,8,8,]),'assignment':([0,2,12,24,82,89,90,125,],[9,9,9,9,9,9,9,9,]),'break_statement':([0,2,12,24,82,89,90,125,],[10,10,10,10,10,10,10,10,]),'continue_statement':([0,2,12,24,82,89,90,125,],[11,11,11,11,11,11,11,11,]),'lvalue':([0,2,12,24,82,89,90,125,],[19,19,19,19,19,19,19,19,]),'matrix_element':([0,2,12,17,18,24,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,82,83,84,85,86,87,88,89,90,121,125,],[22,22,22,37,37,22,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,22,37,37,37,37,37,37,22,22,37,22,]),'expression':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[30,45,55,55,45,69,70,45,77,78,79,80,81,91,93,94,95,96,97,98,99,100,45,45,45,106,113,114,115,116,117,118,126,]),'matrix_function':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'vector':([17,18,25,26,28,31,32,40,46,47,48,49,50,57,60,61,62,63,64,65,66,67,72,73,74,76,83,84,85,86,87,88,121,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'vector_elements':([18,28,40,72,73,74,],[44,58,71,103,104,105,]),'condition':([25,26,],[54,56,]),'range':([57,],[90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','Mparser.py',35),
  ('statements -> statement','statements',1,'p_statements','Mparser.py',41),
  ('statements -> statements statement','statements',2,'p_statements2','Mparser.py',47),
  ('statement -> if_statement','statement',1,'p_statement','Mparser.py',53),
  ('statement -> while_loop','statement',1,'p_statement','Mparser.py',54),
  ('statement -> for_loop','statement',1,'p_statement','Mparser.py',55),
  ('statement -> return_statement','statement',1,'p_statement','Mparser.py',56),
  ('statement -> print_statement','statement',1,'p_statement','Mparser.py',57),
  ('statement -> assignment','statement',1,'p_statement','Mparser.py',58),
  ('statement -> break_statement','statement',1,'p_statement2','Mparser.py',64),
  ('statement -> continue_statement','statement',1,'p_statement3','Mparser.py',70),
  ('statement -> LBRACE statements RBRACE','statement',3,'p_statement_brace','Mparser.py',76),
  ('assignment -> lvalue ASSIGN expression SEMICOLON','assignment',4,'p_assignment','Mparser.py',82),
  ('assignment -> lvalue ADDASSIGN expression SEMICOLON','assignment',4,'p_assignment','Mparser.py',83),
  ('assignment -> lvalue SUBASSIGN expression SEMICOLON','assignment',4,'p_assignment','Mparser.py',84),
  ('assignment -> lvalue MULASSIGN expression SEMICOLON','assignment',4,'p_assignment','Mparser.py',85),
  ('assignment -> lvalue DIVASSIGN expression SEMICOLON','assignment',4,'p_assignment','Mparser.py',86),
  ('matrix_element -> ID LBRACKET vector_elements RBRACKET','matrix_element',4,'p_matrix_element','Mparser.py',92),
  ('lvalue -> matrix_element','lvalue',1,'p_lvalue_matrix_element','Mparser.py',98),
  ('lvalue -> ID','lvalue',1,'p_lvalue_id','Mparser.py',104),
  ('expression -> expression PLUS expression','expression',3,'p_expression','Mparser.py',110),
  ('expression -> expression MINUS expression','expression',3,'p_expression','Mparser.py',111),
  ('expression -> expression TIMES expression','expression',3,'p_expression','Mparser.py',112),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','Mparser.py',113),
  ('expression -> expression DOTADD expression','expression',3,'p_expression','Mparser.py',114),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression','Mparser.py',115),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression','Mparser.py',116),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression','Mparser.py',117),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_in_par','Mparser.py',123),
  ('expression -> FLOATNUM','expression',1,'p_expression_floatnum','Mparser.py',129),
  ('expression -> INTNUM','expression',1,'p_expression_intnum','Mparser.py',135),
  ('expression -> STRING','expression',1,'p_expression_string','Mparser.py',141),
  ('expression -> ID','expression',1,'p_expression_id','Mparser.py',147),
  ('expression -> matrix_element','expression',1,'p_expression_matrix_element','Mparser.py',153),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','Mparser.py',159),
  ('expression -> expression TRANSPOSE','expression',2,'p_expression_transpose','Mparser.py',165),
  ('condition -> expression LT expression','condition',3,'p_condition','Mparser.py',171),
  ('condition -> expression GT expression','condition',3,'p_condition','Mparser.py',172),
  ('condition -> expression LE expression','condition',3,'p_condition','Mparser.py',173),
  ('condition -> expression GE expression','condition',3,'p_condition','Mparser.py',174),
  ('condition -> expression NE expression','condition',3,'p_condition','Mparser.py',175),
  ('condition -> expression EQ expression','condition',3,'p_condition','Mparser.py',176),
  ('expression -> matrix_function','expression',1,'p_matrix_expression','Mparser.py',182),
  ('expression -> vector','expression',1,'p_matrix_expression','Mparser.py',183),
  ('matrix_function -> EYE LPAREN vector_elements RPAREN','matrix_function',4,'p_statement_eye','Mparser.py',189),
  ('matrix_function -> ZEROS LPAREN vector_elements RPAREN','matrix_function',4,'p_statement_zeros','Mparser.py',195),
  ('matrix_function -> ONES LPAREN vector_elements RPAREN','matrix_function',4,'p_statement_ones','Mparser.py',201),
  ('if_statement -> IF LPAREN condition RPAREN statement','if_statement',5,'p_if_statement','Mparser.py',207),
  ('if_statement -> IF LPAREN condition RPAREN statement ELSE statement','if_statement',7,'p_if_else_statement','Mparser.py',213),
  ('while_loop -> WHILE LPAREN condition RPAREN statement','while_loop',5,'p_while_loop','Mparser.py',219),
  ('for_loop -> FOR ID ASSIGN range statement','for_loop',5,'p_for_loop','Mparser.py',225),
  ('range -> expression COLON expression','range',3,'p_range','Mparser.py',231),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','Mparser.py',237),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','Mparser.py',243),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','Mparser.py',249),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement2','Mparser.py',255),
  ('print_statement -> PRINT vector_elements SEMICOLON','print_statement',3,'p_print_statement','Mparser.py',261),
  ('vector -> LBRACKET vector_elements RBRACKET','vector',3,'p_vector','Mparser.py',285),
  ('vector_elements -> expression','vector_elements',1,'p_vector_elements','Mparser.py',291),
  ('vector_elements -> vector_elements COMMA expression','vector_elements',3,'p_vector_elements2','Mparser.py',297),
]
